////////////////////////////////////////////////////////////////////////////
Copyright (c) 2013 UBINITY SAS 

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
///////////////////////////////////////////////////////////////////////////



PCSC Javascript Bridge User Guide
=================================
CÃ©dric Mesnil <cedric dot mesnil at ubinity dot com>
v0.2, June 2013

== Introduction

This plugin is based on firebreath framework and is still under development.

Any reports, comments, request....please use the github interface: https://github.com/ubinity/webpcsc-firebreath.
(You  may also email at +cedric dot mesnil at ubinity dot com+)

The plugin offers 2 access levels to the PCSC API:

  - a one-to-one PCSCLite function mapping.
  - a more object oriented, trying to simplify the card access and offering a minimal but easy to use function set.

It offers four kinds of object:

  - PCSCBridge
  - SCardAPI
  - TerminalAPI
  - ReaderAPI

PCSCBridge is the main entry point to the PCSC APIs. (There is single instance of this object).

SCardAPI provides PCSCLite API. (There is single instance of this object).

TerminalAPI and ReaderAPI give access to the reader and its inserted card in a simple way.


.Notation:

  - Javascript type are written between \{ \}, eg \{string\}, \{number\}
  - hex number value are written between ` ' , eg `1A' or `1a'
  - decimal number value are written as is, eg 10 
  - literal string are written between " "; eg "a string"
  - literal hexa string start with #, eg #1babe0


.Firebreath:
 
 - See http://www.firebreath.org/ for any details about this framework.

== Compile & Install

=== Compilation

For compilation, binary package see the README file.

=== Firefox/Chrome under Windows/Linux 

Intall either  +dist/chrome/PCSCBridgeExtension.crx+ or +dist/firefox/PCSCBridgeExtension.xpi+ extension pack.

=== Other browsers under windows

Directly register the dll with:

--------
    regserv32    dist/libs/npPCSCBridge.dll
--------

Note this will install the dll plugin for all browsers. To unregister the dll use:

--------
    regserv32 /u dist/libs/npPCSCBridge.dll
--------

=== MAC/OS

Not supported yet.


== Initing the plugin

Before anything you must declare the plugin in your web page, load it, and initialize it in order to
establish the PCSC context and get the root bridge object.

The easiest way is to do that on the load page event:

--------
    <script type="text/javascript">
        var bridge;
        function load() {
            bridge =  document.getElementById('pcscbridge');
            bridge.init();
        }
    </script>  

    <body onload="load()">
        <object id="pcscbridge" type="application/x-pcscbridge" width="0" height="0">
            <param name="onload" value="pluginLoaded" />
        </object><br />

        <!-- INSERT HTML CODE -->

    </body>
--------

== PCSCBridge APIs

The root PCSCBridge object offers the following APIs:

  - TerminalAPI getTerminalAPI()
  - SCardAPI    getSCardAPI()

It also offer the following read only properties:

  - \{string\} version
  - SCARD_SHARE_SHARED 
  - SCARD_SHARE_EXCLUSIVE 
  - SCARD_SHARE_DIRECT 
  - SCARD_PROTOCOL_T0 
  - SCARD_PROTOCOL_T1 
  - SCARD_PROTOCOL_RAW 
  - SCARD_PROTOCOL_T15 
  - SCARD_LEAVE_CARD 
  - SCARD_RESET_CARD 
  - SCARD_UNPOWER_CARD 
  - SCARD_EJECT_CARD 
  - SCARD_UNKNOWN 
  - SCARD_ABSENT 
  - SCARD_PRESENT 
  - SCARD_SWALLOWED 
  - SCARD_POWERED 
  - SCARD_NEGOTIABLE 
  - SCARD_SPECIFIC 
  - SCARD_STATE_UNAWARE 
  - SCARD_STATE_IGNORE 
  - SCARD_STATE_CHANGED 
  - SCARD_STATE_UNKNOWN 
  - SCARD_STATE_UNAVAILABLE 
  - SCARD_STATE_EMPTY 
  - SCARD_STATE_PRESENT 
  - SCARD_STATE_ATRMATCH 
  - SCARD_STATE_EXCLUSIVE 
  - SCARD_STATE_INUSE 
  - SCARD_STATE_MUTE 
  - SCARD_STATE_UNPOWERED 
  - SCARD_ATTR_VENDOR_NAME 
  - SCARD_ATTR_VENDOR_IFD_TYPE 
  - SCARD_ATTR_VENDOR_IFD_VERSION 
  - SCARD_ATTR_VENDOR_IFD_SERIAL_NO 
  - SCARD_ATTR_CHANNEL_ID 
  - SCARD_ATTR_ASYNC_PROTOCOL_TYPES 
  - SCARD_ATTR_DEFAULT_CLK 
  - SCARD_ATTR_MAX_CLK 
  - SCARD_ATTR_DEFAULT_DATA_RATE 
  - SCARD_ATTR_MAX_DATA_RATE 
  - SCARD_ATTR_MAX_IFSD 
  - SCARD_ATTR_SYNC_PROTOCOL_TYPES 
  - SCARD_ATTR_POWER_MGMT_SUPPORT 
  - SCARD_ATTR_USER_TO_CARD_AUTH_DEVICE 
  - SCARD_ATTR_USER_AUTH_INPUT_DEVICE 
  - SCARD_ATTR_CHARACTERISTICS 
  - SCARD_ATTR_CURRENT_PROTOCOL_TYPE 
  - SCARD_ATTR_CURRENT_CLK 
  - SCARD_ATTR_CURRENT_F 
  - SCARD_ATTR_CURRENT_D 
  - SCARD_ATTR_CURRENT_N 
  - SCARD_ATTR_CURRENT_W 
  - SCARD_ATTR_CURRENT_IFSC 
  - SCARD_ATTR_CURRENT_IFSD 
  - SCARD_ATTR_CURRENT_BWT 
  - SCARD_ATTR_CURRENT_CWT 
  - SCARD_ATTR_CURRENT_EBC_ENCODING 
  - SCARD_ATTR_EXTENDED_BWT 
  - SCARD_ATTR_ICC_PRESENCE 
  - SCARD_ATTR_ICC_INTERFACE_STATUS 
  - SCARD_ATTR_CURRENT_IO_STATE 
  - SCARD_ATTR_ATR_STRING 
  - SCARD_ATTR_ICC_TYPE_PER_ATR 
  - SCARD_ATTR_ESC_RESET 
  - SCARD_ATTR_ESC_CANCEL 
  - SCARD_ATTR_ESC_AUTHREQUEST 
  - SCARD_ATTR_MAXINPUT 
  - SCARD_ATTR_DEVICE_UNIT 
  - SCARD_ATTR_DEVICE_IN_USE 
  - SCARD_ATTR_DEVICE_FRIENDLY_NAME 
  - SCARD_ATTR_DEVICE_SYSTEM_NAME 
  - SCARD_ATTR_SUPRESS_T1_IFS_REQUEST 
  - SCARD_S_SUCCESS 
  - SCARD_F_INTERNAL_ERROR 
  - SCARD_E_CANCELLED 
  - SCARD_E_INVALID_HANDLE 
  - SCARD_E_INVALID_PARAMETER 
  - SCARD_E_INVALID_TARGET 
  - SCARD_E_NO_MEMORY 
  - SCARD_F_WAITED_TOO_LONG 
  - SCARD_E_INSUFFICIENT_BUFFER 
  - SCARD_E_UNKNOWN_READER 
  - SCARD_E_TIMEOUT 
  - SCARD_E_SHARING_VIOLATION 
  - SCARD_E_NO_SMARTCARD 
  - SCARD_E_UNKNOWN_CARD 
  - SCARD_E_CANT_DISPOSE 
  - SCARD_E_PROTO_MISMATCH 
  - SCARD_E_NOT_READY 
  - SCARD_E_INVALID_VALUE 
  - SCARD_E_SYSTEM_CANCELLED 
  - SCARD_F_COMM_ERROR 
  - SCARD_F_UNKNOWN_ERROR 
  - SCARD_E_INVALID_ATR 
  - SCARD_E_NOT_TRANSACTED 
  - SCARD_E_READER_UNAVAILABLE 
  - SCARD_P_SHUTDOWN 
  - SCARD_E_PCI_TOO_SMALL 
  - SCARD_E_READER_UNSUPPORTED 
  - SCARD_E_DUPLICATE_READER 
  - SCARD_E_CARD_UNSUPPORTED 
  - SCARD_E_NO_SERVICE 
  - SCARD_E_SERVICE_STOPPED 
  - SCARD_E_UNEXPECTED 
  - SCARD_E_UNSUPPORTED_FEATURE 
  - SCARD_E_ICC_INSTALLATION 
  - SCARD_E_ICC_CREATEORDER 
  - SCARD_E_DIR_NOT_FOUND 
  - SCARD_E_FILE_NOT_FOUND 
  - SCARD_E_NO_DIR 
  - SCARD_E_NO_FILE 
  - SCARD_E_NO_ACCESS 
  - SCARD_E_WRITE_TOO_MANY 
  - SCARD_E_BAD_SEEK 
  - SCARD_E_INVALID_CHV 
  - SCARD_E_UNKNOWN_RES_MNG 
  - SCARD_E_NO_SUCH_CERTIFICATE 
  - SCARD_E_CERTIFICATE_UNAVAILABLE 
  - SCARD_E_NO_READERS_AVAILABLE 
  - SCARD_E_COMM_DATA_LOST 
  - SCARD_E_NO_KEY_CONTAINER 
  - SCARD_E_SERVER_TOO_BUSY 
  - SCARD_W_UNSUPPORTED_CARD 
  - SCARD_W_UNRESPONSIVE_CARD 
  - SCARD_W_UNPOWERED_CARD 
  - SCARD_W_RESET_CARD 
  - SCARD_W_REMOVED_CARD 
  - SCARD_W_SECURITY_VIOLATION 
  - SCARD_W_WRONG_CHV 
  - SCARD_W_CHV_BLOCKED 
  - SCARD_W_EOF 
  - SCARD_W_CANCELLED_BY_USER 
  - SCARD_W_CARD_NOT_AUTHENTICATED 


==  SCard APIs

SCard APIs implement one-to-one mapping of function specified by PCSCLite.
This section only details how the mapping is done. For functional specification
please visit http://pcsclite.alioth.debian.org/api/group__API.html


All javascript function defined in SCarsAPI take only one associative array argument
and returns an error code. Any array attribute that is not specified by the mapping
is simply ignored and leave untouched. 

The SCard APIs is retrieved with through the bridge:

--------
    var SCard     = bridge.getSCardAPI();
--------


=== EstablishContext

[float,,13]
C prototype

-------
    LONG 	SCardEstablishContext (DWORD dwScope, 
                                       LPCVOID pvReserved1, LPCVOID pvReserved2, 
                                       LPSCARDCONTEXT phContext)
-------

[float,,13]
JS prototype

--------
    {number} SCard.EstablishContext( {
        dwScope: {number}, 
        hContext: {number}
    }
--------

=== ReleaseContext

[float,,13]
C prototype

-------
    LONG 	SCardReleaseContext (SCARDCONTEXT hContext)
-------

[float,,13]
JS prototype

--------
    {number} SCard.ReleaseContext({
        hContext: {number}
    })
--------


=== Connect

[float,,13]
C prototype

-------
    LONG 	SCardConnect (SCARDCONTEXT hContext, 
                              LPCSTR szReader, DWORD dwShareMode, DWORD dwPreferredProtocols, 
                              LPSCARDHANDLE phCard, LPDWORD pdwActiveProtocol)
-------
    
    

[float,,13]
JS prototype

--------
    {number} SCard.Connect({
        hContext:             {number},
        strReader:            {string},
        dwShareMode:          {number},
        dwPreferredProtocols: {number},
        hCard:                {number},
        dwActiveProtocol:     {number}
    })
--------


=== Disconnect

[float,,13]
C prototype

-------
    LONG 	SCardDisconnect (SCARDHANDLE hCard, DWORD dwDisposition)
-------

[float,,13]
JS prototype

--------
    {number} SCard.Disconnect({
        hCard:         {number},
        dwDisposition: {number}
    })
--------

=== Transmit

[float,,13]
C prototype

-------
    LONG 	SCardTransmit (SCARDHANDLE hCard, 
                               const SCARD_IO_REQUEST *pioSendPci, LPCBYTE pbSendBuffer, DWORD cbSendLength, 
                               SCARD_IO_REQUEST *pioRecvPci, LPBYTE pbRecvBuffer, LPDWORD pcbRecvLength)
-------

[float,,13]
JS prototype

--------
    {number} SCard.Transmit({
        hCard:       {number},
        ioSendPci:   {number},
        bSendBuffer: {hexstring},
        ioRecvPci:   {number},
        bRecvBuffer: {hexstring}
    })
--------

=== Status

[float,,13]
C prototype

-------
    LONG 	SCardStatus (SCARDHANDLE hCard, LPSTR mszReaderName, LPDWORD pcchReaderLen, 
                             LPDWORD pdwState, LPDWORD pdwProtocol, 
                             LPBYTE pbAtr, LPDWORD pcbAtrLen)
-------

[float,,13]
JS prototype

--------    
    {number} SCard.Status({
        hCard:         {number},
        strReaderName: {string},
        dwState:       {number},
        dwProtocol:    {number},
        bATR:          {hexstring}
    })
--------

=== IsValidContext

[float,,13]
C prototype

-------
    LONG 	SCardIsValidContext (SCARDCONTEXT hContext)
-------

[float,,13]
JS prototype

--------
    {number} SCard.IsValidContext({
        hcontext: {number}
    })
-------- 

=== BeginTransaction

[float,,13]
C prototype

-------
    LONG 	SCardBeginTransaction (SCARDHANDLE hCard)
-------

[float,,13]
JS prototype

--------
    {number} SCard.BeginTransaction({
        hCard: {number}
    })
-------- 

=== EndTransaction

[float,,13]
C prototype

-------
    LONG 	SCardEndTransaction (SCARDHANDLE hCard, DWORD dwDisposition)
-------

[float,,13]
JS prototype

--------
    {number} SCard.EndTransaction({
        hCard:         {number},
        dwDisposition: {number}
    })
-------- 

=== ListReaders

[float,,13]
C prototype

-------
    LONG 	SCardListReaders (SCARDCONTEXT hContext, LPCSTR mszGroups, 
                                  LPSTR mszReaders, LPDWORD pcchReaders)
-------

[float,,13]
JS prototype

--------
    {number} SCard.ListReaders({
        hContext:   {number},
        strGroups:  {string},
        strReaders: {string}[]
    })
-------- 

=== Cancel

[float: {string},,13]
C prototype

-------
    LONG 	SCardCancel (SCARDCONTEXT hContext)
-------

[float,,13]
JS prototype

--------
    {number} SCard.Cancel({
        hcontext: {number}
    })
-------- 

=== GetStatusChange

[float,,13]
C prototype

-------
    LONG 	SCardGetStatusChange (SCARDCONTEXT hContext, DWORD dwTimeout, 
                                      SCARD_READERSTATE *rgReaderStates, DWORD cReaders)
-------


[float,,13]
JS prototype

--------
    {number} SCard.GetStatusChange({
        hcontext:      {number},
        dwTimeout:     {number},
        readerStates:  readerState[]
    })
 
    readerState {
        strReader:      {sring},
        dwCurrentState: {number},
        dwEventState:   {number},
        bAtr:           {hexstring}
   }
--------

=== Control

[float,,13]
C prototype

-------
    LONG 	SCardControl (SCARDHANDLE hCard, DWORD dwControlCode, 
                              LPCVOID pbSendBuffer, DWORD cbSendLength, 
                              LPVOID pbRecvBuffer, DWORD cbRecvLength, 
                              LPDWORD lpBytesReturned)
-------
[float,,13]
JS prototype

--------
    {number} SCard.Control({
        hCard:         {number},
        dwControlCode: {number},
        bSendBuffer:   {hexstring},
        bRecvBuffer:   {hexstring}
    })
--------

=== GetAttrib

[float,,13]
C prototype

-------
    LONG 	SCardGetAttrib (SCARDHANDLE hCard, DWORD dwAttrId, 
                                LPBYTE pbAttr, LPDWORD pcbAttrLen)
-------

[float,,13]
JS prototype

--------
    {number} SCard.GetAttrib({
        hCard:    {number},
        dwAttrId: {number},
        bAttr:    {hexstring}
    })
--------

=== SetAttrib

[float,,13]
C prototype

-------
    LONG 	SCardSetAttrib (SCARDHANDLE hCard, DWORD dwAttrId, 
                                LPCBYTE pbAttr, DWORD cbAttrLen)
-------

[float,,13]
JS prototype

--------
    {number} SCard.SetAttrib({
        hCard: {number},
        dwAttrId: {number},
        bAttr: {hexstring}
    })
--------


== TERMINAL/READER APIs

=== PCSCTerminal APIs

The root PCSCTerminal object offers the following APIs:

  - \{string[]\}  listReaders()
  - PCSCReader  selectReader(\{string\} prefix_reader_name)
  - \{string\}    strError(\{number\} errcode)

  
==== Mehtod +listReaders+

Returns array of currently found readers. 


==== Mehtod +selectReader+

The select method build and return a new PCSCReader object. 
The select method does not try to connect to reader nor even check its existence.

The provided prefix reader name will used later, when trying to power up the reader. 
At this moment the first reader available and starting with this prefix will be selected.

==== Property +version+ 


The version of this plugin

=== PCSCReader APIs

Each  PCSCReader object offers the following APIs:

 - \{string\} powerUp()
 - void powerDown()
 - \{string\} transmit(\{string\} APDU)
 - \{string\} exchangeAPDU(\{string\} APDU, \{bool\} extended)

It also offers the following ReadWrite properties:
 - \{bool\}   autoReissue
 - \{bool\}   autoGetResponse
 - \{bool\}   autoChaining
 - \{number\} scardMode
 - \{bool\}   preferredProtocols
 - \{bool\}   extendedLengthSupported

and also offers the following ReadOnly properties:

 - atr
 - protocol
 - error
 - SW


Finally the following constant (ReadOnly) properties is also 
 - SCARD_SHARE_SHARED
 - SCARD_SHARE_EXCLUSIVE
 - SCARD_SHARE_DIRECT
 - SCARD_PROTOCOL_T0
 - SCARD_PROTOCOL_T1
 - SCARD_PROTOCOL_RAW


==== Mehtod +powerUp+

If the reader is already powered, the reader is first powered down. The SCardDisconnect function is called.

Then an existing reader with a name starting with the given prefix to the selectReader method is looked up. If found the reader is powerup (using SCardConnect) according the current value of _scardMode_, expecting a card is present, and the ATR is returned.

If card is succefully powered, the _ATR_ and _protocol_  properties are updated and the ATR is returned. 

If something goes wrong, the empty string is returned and the _error_ contains the last error code.


==== Mehtod +powerDown+

The reader is powered down, using SCardDisconnect function.

This method does not return anything, but _error_ should be checked.

==== Mehtod +transmit+

Send the given APDU (encoding as hexstring) to the card and return the card response as hexstring.

This method send the APDU exactly as provided and does not try to handle any protocol specific features.
Especially, the method does not automatique handle status word `61xx' and `6Cxx' and does not atomically reissue any command nor send any GET_REPONSE

==== Mehtod +exchangeAPDU+

Send the given APDU (encoding as hexstring) to the card and return the card response as hexstring.

This method tries to be smart and :

  - handle automatically reissue the command in case of `6Cxx' status word, if the _autoReissue_
    property is set to true
  - emit atomically a GET_REPONSE in case of `61xx' status word, if the _autoGetResponse_
    property is set to true
  - if the APDU is an extended one, and extended length is not supported 
    (_extendedLengthSupported_ set to false), this method try to automatically handle the T0
   chaining, if _autoChaining_ is set to true


==== Property +atr+

Contains ATR of last powerup, if card is still powered.

Empty string if there is no powered card.

====  Property +protocol+

Contains currently used protocol:
 
 - 1 for T1
 - 0 for T0


====  Property +error+

Contains last error code. A string description can be retrieved from _PCSCBridge.strError_ function.

==== Property +extendedLengthSupported+

Behavior condition for exchangeAPDU method.
Tell if the application on the powered card support or not the extended APDU.

==== Property +autoReissue+

Behavior condition for exchangeAPDU method.

==== Property +autoGetResponse+

Behavior condition for exchangeAPDU method.

==== Property +autoChaining+

Behavior condition for exchangeAPDU method.

==== Property +scardMode+

Used by SCardConnect during _powerUp_ call. Possible values are:

 - PCSCBridge.SCARD_SHARE_SHARED
 - PCSCBridge.SCARD_SHARE_EXCLUSIVE
 - PCSCBridge.SCARD_SHARE_DIRECT

==== Property +preferredProtocols+

Used by SCardConnect during _powerUp_ call. Possible values are:

 - PCSCBridge.SCARD_PROTOCOL_T0
 - PCSCBridge.SCARD_PROTOCOL_T1
 - PCSCBridge.SCARD_PROTOCOL_RAW

=== Example

See the projects/PCSCBridge/test/test.html.

